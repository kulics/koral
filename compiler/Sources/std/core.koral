export std;

[primitive]
type Int;

[primitive]
type Int8;

[primitive]
type Int16;

[primitive]
type Int32;

[primitive]
type Int64;

[primitive]
type UInt;

[primitive]
type UInt8;

[primitive]
type UInt16;

[primitive]
type UInt32;

[primitive]
type UInt64;

[primitive]
type Bool;

type Byte = UInt8;

[primitive]
type Float16;

[primitive]
type Float32;

[primitive]
type Float64;

type Any;

[primitive]
type (T: Any)Ptr;

given(T: Any) (T)Ptr {
    [primitive]
    unsafe self.read(offset: UInt): T;

    [primitive]
    unsafe self.write(offset: UInt, value: T): Void;

    [primitive]
    self.is_null(): Bool;

    [primitive]
    malloc(count: UInt): (T)Ptr;

    [primitive]
    unsafe free(ptr: (T)Ptr): Void;
}

type (T: Any)Array([private]ptr: (T)Ptr, [private]len: UInt);

given(T: Any) (T)Array {
    new(size: UInt): (T)Array = Array(Ptr.malloc(size), size);

    self.size(): UInt = self.len;

    self.get(index: UInt): T = self.ptr.read(index);

    self.set(index: UInt, value: T): Void = self.ptr.write(index, value);
}

type String([private] src: (Byte)Array);

given String {
    self.size(): UInt = self.src.size();
}

type (T: Any)Option {
    Some(value: T);
    None();
}

type (T: Any)Iterator {
    self.next(): (T)Option;
}

