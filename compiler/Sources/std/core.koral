export std;

primitive type Int;

primitive type Int8;

primitive type Int16;

primitive type Int32;

primitive type Int64;

primitive type UInt;

primitive type UInt8;

primitive type UInt16;

primitive type UInt32;

primitive type UInt64;

primitive type Bool;

type Byte = UInt8;

primitive type Float16;

primitive type Float32;

primitive type Float64;

type Any;

primitive type [T Any]Ptr;

given[T Any] [T]Ptr {
    primitive unsafe self.read(offset UInt) T;

    primitive unsafe self.write(offset UInt, value T) Void;

    primitive self.is_null() Bool;

    primitive malloc(count UInt) [T]Ptr;

    primitive unsafe free(ptr [T]Ptr) Void;
}

type [T Any]Array(private ptr [T]Ptr, private len UInt);

given[T Any] [T]Array {
    new(size UInt) [T]Array = Array(Ptr.malloc(size), size);

    self.size() UInt = self.len;

    self.get(index UInt) T = self.ptr.read(index);

    self.set(index UInt, value T) Void = self.ptr.write(index, value);
}

type String(private src [Byte]Array);

given String {
    self.size() UInt = self.src.size();
}

type Comparable {
    compare(src Self, dst Self) Int;
}

let [T Comparable]max(a T, b T) T = if compare(a, b) > 0 then a else b;
let [T Comparable]min(a T, b T) T = if compare(a, b) < 0 then a else b;

type [T Any]Option {
    Some(value T);
    None();
}

given[T Any] [T]Option {
    self.[R Any]map(fn [T, R]Func) [R]Option = if self is Some(v) then Some(fn(v)) else None();
}

type [T Any]Iterator {
    self.next() [T]Option;
}

given[T Any] [T]Iterator {
    self.filter(fn [T, Bool]Func) [T]Iterator = [T]FilterIterator;
    self.[R Any]map(fn [T, R]Func) [R]Iterator = [T, R]MapIterator;
}

type [T Any]FilterIterator(it [T]Iterator, fn [T, Bool]Func);

given[T Any] [T]FilterIterator {
    self.next() [T]Option = {
        while self.it.next() is Some(v) then {
            if self.fn(v) then return Some(v);
        }
        return None();
    }
}

type [T Any, R Any]MapIterator(it [T]Iterator, fn [T, R]Func);

given[T Any, R Any] [T, R]MapIterator {
    self.next() [R]Option = self.it.next().map(fn);
}