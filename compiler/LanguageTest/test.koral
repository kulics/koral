// variable
let x: Int = 5;
let y: Float = 3.2;
let z: String = "Hello";
let b: Bool = true;
// function
let add(x: Int, y: Int): Int = x + y;
let subtract(x: Int, y: Int): Int = x - y;
let multiply(x: Int, y: Int): Int = x * y;
let divide(x: Int, y: Int): Int = x / y;
let modulo(x: Int, y: Int): Int = x % y;
let compare(x: Int, y: Int): Bool = x == y;
let not_equal(x: Int, y: Int): Bool = x <> y;
let greater(x: Int, y: Int): Bool = x > y;
let less(x: Int, y: Int): Bool = x < y;
let blockExample(a: Int, b: Int): Int = {
    let result: Int = a * b;
    result
};
let mut x_mut: Int = 5;
let change_x(): Int = {
    x_mut = 10;
    x_mut
};
let ifExample(x: Int, y: Int): Int = {
    if x > y then {
        x
    } else if x < y then {
        y
    } else 0
};
let whileExample(): Void = {
    let mut counter: Int = 0;
    while counter < 5 then {
        counter = counter + 1;
    }
};
let whileSum(): Int = {
    let mut sum: Int = 0;
    let mut i: Int = 1;
    while i <= 10 then {
        sum = sum + i;
        i = i + 1;
    };
    sum
};
let voidExample(): Void = if true then {} else {};
let voidExample2(): Void = {
    let a: Void = {};
    a
};
let callFunction(): Int = {
    add(1, 2)
};
let voidFunction(): Void = {};
let voidFunction2(): Void = {
    let x: Int = 5;
};

let shortCircuit(x: Int): Int = {
    let a: Bool = x > 0;
    let b: Bool = x < 10;
    if a and b then {
        1
    } else if not a or b then {
        2
    } else {
        3
    }
};

let conditionExample(x: Int, y: Int): Int = {
    if x > 0 and y > 0 then {
        1
    } else if not x < 0 or y == 0 then {
        2
    } else {
        3
    }
};

type val Foo(x: Int, y: Int);
type val Bar(x: Bool);

let use_Foo(a: Foo): Void = {};
let make_Foo(): Foo = Foo(1, 2);
let make_Bar(): Bar = Bar(true);
let access_member_of_Foo(a: Foo): Int = a.x + a.y;

type RcFoo(x: Int, mut y: Int);

let access_member_of_RcFoo(a: RcFoo): Int = a.x + a.y;
let use_RcFoo(a: RcFoo): Void = {};
let make_RcFoo(): RcFoo = RcFoo(1, 2);
let move_RcFoo(a: RcFoo): RcFoo = a;
let rc_test(): Void = {
    let x: RcFoo = make_RcFoo();
    let mut y: RcFoo = make_RcFoo();
    y = x;
    y = move_RcFoo(make_RcFoo());
    use_RcFoo(x);
};

type RcBar(a: RcFoo, mut b: RcFoo);
let access_member_of_RcBar(a: RcBar): Int = a.a.x + a.a.y + a.b.x + a.b.y;
let use_RcBar(a: RcBar): Void = {};
let make_RcBar(): RcBar = RcBar(RcFoo(1, 2), RcFoo(2, 1));
let move_RcBar(a: RcBar): RcBar = a;

let main(): Int = {
    while true then rc_test();
    0
}