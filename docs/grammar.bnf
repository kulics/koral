<program> ::= <declaration>*

<declaration> ::= <variable-declaration> 
                | <function-declaration>
                | <type-declaration>

<variable-declaration> ::= "let" "mut"? <identifier> <type> "=" <expression> ";"

<function-declaration> ::= "let" <identifier> "(" <parameter-list>? ")" <type> "=" <expression> ";"

<type-declaration> ::= "type" "val"? <identifier> <struct-definition> ";"

<struct-definition> ::= "(" <record-field-list>? ")"
<record-field-list> ::= <record-field> ("," <record-field>)* 
<record-field> ::= "mut"? <identifier> <type>

<parameter-list> ::= <parameter> ("," <parameter>)*
<parameter> ::= <identifier> <type>

<type> ::= <identifier>  

<statement> ::= <variable-declaration> 
              | <assignment> 
              | <expression-statement>

<assignment> ::= <identifier> "=" <expression> ";"

<expression-statement> ::= <expression> ";"

<expression> ::= <block-expression>
               | <if-expression>
               | <while-expression>
               | <or-expression>

<or-expression> ::= <and-expression> ("or" <and-expression>)*

<and-expression> ::= <not-expression> ("and" <not-expression>)*

<not-expression> ::= "not" <not-expression> | <comparison-expression>

<comparison-expression> ::= <arithmetic-expression> <comparison-operator> <arithmetic-expression>
                        | <arithmetic-expression>

<comparison-operator> ::= "==" | "<>" | ">" | "<" | ">=" | "<="

<arithmetic-expression> ::= <term> ("+" <term> | "-" <term>)*

<term> ::= <factor> ("*" <factor> | "/" <factor> | "%" <factor>)*

<factor> ::= <integer-literal>
         | <float-literal>
         | <string-literal>
         | <bool-literal>
         | <function-call>
         | <identifier>

<if-expression> ::= "if" <expression> "then" <expression> "else" <expression>

<while-expression> ::= "while" <expression> "then" <expression>

<block-expression> ::= "{" <statement>* (<expression>)? "}"

<function-call> ::= <identifier> "(" <argument-list>? ")"
<argument-list> ::= <expression> ("," <expression>)*

<integer-literal> ::= [0-9]+
<float-literal> ::= [0-9]+ "." [0-9]+
<string-literal> ::= "\"" [^"]* "\""
<bool-literal> ::= "true" | "false"
<identifier> ::= [a-zA-Z][a-zA-Z0-9_]*
