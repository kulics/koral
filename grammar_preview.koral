## Grammar Overview

## Export Name Space
export demo;

## Import Name Space
import {
    System;
    System.Text;
    System.Threading.Tasks;
    . = IO.File; ## 可以隐藏元素使用内容
}

let main() = {
    ## Define, 一般情况下编译器会自动判断类型
    let string String = "10";
    let number Float = 1.2;
    let integer Int = 123;
    let boolean Bool = true;
    let smallFloat = (1.2).toFloat32(); ## basic obj convert

    ## Const
    let PI = 3.141592653;

    ## Mark String
    let format = "the value is \{integer}, \{number}, \{boolean}";

    ## Array
    let array Array(Int) = Array.of(1, 2, 3);

    ## List
    let list List(Int) = List.of(1, 2, 3, 4, 5);
    print( list[0] ); ## 使用下标获取

    ## Map, 前面为 key，后面为 value
    let map Map(String, Bool) = Map.of(("1", false), ("2", true));
    print( map["1"] ); ## 使用key获取

    ## Function
    let f(a Int) Int = a;

    ## Function with no params no return
    let do_something_void() Void = {
        do_something_a();
        do_something_b();
    }

    ## Full Function with params and return
    let do_something_with_params(x Int, y String) type(Int, String) = (x, y);

    ## Function type
    let f type(Int, Int) Int = (x Int, y Int) Int -> x + y;
    let f type(Int, Int) Int = (x, y) -> x + y;
    let f(x Int, y Int) Int = x + y;
    let f(x Int, y Int) = x + y;
    let g() Void = {}
    let g type() Void = () -> {}

    ## Currying
    let add = (x Int) -> (y Int) -> x + y;
    let add type(Int) type(Int) Int = (x) -> (y) -> x + y;
    let add type(Int)(Int) Int = x -> y -> x + y;
    let add(x Int)(y Int) = x + y;
    let v = add(1)(2);

    ## Lambda Function
    List.of(1, 2, 3, 4).filter(x -> x % 2 == 0).map(x -> x * x).sum();

    ## Func params
    let f(i type(Int) Int) = i(1);
    f((x Int) Int -> x);
    f(x -> x);

    do_something_void();
    ## use _ discard return value
    _ = do_something_with_params(3, "test");

    ## if-then, single branch structure
    if a < b then {
        ...
    }

    ## with-init
    if let a = 1; a < 0 then {
        ...
    }

    ## if-then-else, double branch structure
    let v = if true then 0 else 0;
    if true then {
        ...
    } else {
        ...
    }

    if a then {
        ...
    } else if b then {
        ...
    } else {
        ...
    }

    let op Option(Int) = Some(1);
    ## if with pattern matching
    if Some(v) <- op then {
        printLine(v)
    }

    ## while-then, single branch structure
    while a < b then {
        ...
    }

    ## with-init
    while let mut i = 0; i < 10 then {
        printLine(i)
    }

    ## while-then-else, double branch structure, break can with value
    let v = while true then break 1 else 2;
    while true then {
        ...
    } else {
        ...
    }

    let iter Iterator(Int) = List.of(1,2,3).iterator();
    ## while with pattern matching
    while Some(v) <- iter.next() then {
        printLine(v)
    }

    ## switch
    x switch {
        1 -> "a";
        2 -> "b";
        3 -> "c";
        _ -> "d";
    }

    ## single
    switch item <- x then item;

    ## for
    array for {
        1 -> "a";
        2 -> "b";
        3 -> "c";
        _ -> "d";
    }

    ## single
    for item <- array then {
        ...
    }

    ## with-init
    for let list = [1,2,3,4]; item <- list then {
        ...
    }

    ## Loop, use identify to take out single item
    for item <- array then printLine(item);
    
    ## take index and value, both worked at Dictionary
    for (index, value) <- array.enumerate() then {
        printLine((index, value))
    }
    
    for i <- 0..<=10 then {
        printLine(i)
    }

    for i <- 0..<=10 then if i % 2 == 0 then print(i);

    ## sequence
    1..<=10
    1..<10
    10..>1
    10..>=1
    ## slice
    list[:]
    list[1:10]
    list[1:]
    list[:10]

    let nb = 42;
    nb switch {
        >= 0 & <= 7 | 8 | 9 ->
            print("single digit");
        10 ->
            print("double digits");
        >= 11 & <= 99 -> 
            print("double digits");
        >= 100 & <= 999 -> 
            print("triple digits");
        _ ->
            print("four or more digits");
    }

    if A(x) <- foo() and B(y) <- bar(x) then {
        do_stuff_with(x, y)
    } else {
        some_long_expression
    }

    let param_env(tcx TyCtxt, def_id DefId) ParamEnv = {
        if Some(Def.Existential(_)) <- tcx.describe_def(def_id)
            and Some(node_id) <- tcx.hir.as_local_node_id(def_id)
            and hir.map.NodeItem(item) <- tcx.hir.get(node_id)
            and hir.ItemExistential(exist_ty) <- item.node
            and Some(parent) <- exist_ty.impl_trait_fn 
        then return param_env(tcx, parent);

        ...
    }

    ## data type define
    type Button(width Int, height Int, background String, title String) {
        self.click() Void = {
            printLine(title);
            doSomeThingA();
            doSomeThingB();
        }
    }

    ## private members
    type Image(
        private width Int,
        private height Int,
        private source String,
    );

    ## abstract type define
    type Animation {
        self.move(s Int) Void;
        self.stop() Void;
    }

    ## Combine Template
    type ImageButton(image Image, button Button);
    given ImageButton {
        self.move(s Int) Void = {
            let t = 5000/s;
            play( s + t );
        }
        self.stop() Void = {}
    }

    ## Create an Template object
    let btn = Button(1, 2, "Cancel");
    let img = Image(1, 2, "?.jpg");
    let mut ib ImageButton = Image(img, btn);
    ib = (img, btn);
    ## Calling property
    ib.title = "OK";
    ## Calling method
    ib.show();
    ## Calling protocol
    ib.move(6);

    ## Use Interface
    let play_animation(a Animation) = {
        a.move(1000);
        a.stop();
    }
    play_animation(ib);

    ## Annotation
    #Table("user") #Property(false, name = "d", hide = true)
    type User(
        #Column("id") #Required #Key
        id String,
        #Column("nick_name") #Required
        nick_name String,
        #Column("time_update") #Required
        time_update Int,
    );
    
    ## Generic Type
    type mut Table(T Any)(data T);

    given(T Any) Table(T) {
        self.setData(d T) Void = {
            self.data = d;
        }
    }

    Table(Int)(1);

    ## Generic function
    let add(T Addable)(x1 T, x2 T) T = x1 + x2;
    add(Int)(1, 2);

    let opt() = {
        let mut a Option(Int) = Some(1);
        a = None();
        a switch {
            Some(v) -> printLine(v);
            None -> printLine("none");
        }

        let mut b Option(Option(Int)) = Some(Option(Int))(Some(Int)(2));
        b = Option(Option(Int)).Some(Option(Int).Some(2));
        b switch {
            Some(Some(v)) -> printLine(v);
            Some(None) -> printLine("some(none)");
            None -> printLine("none");
        }
    }
    
    type mut? MyList(T Any)(arr mut [T]Array);
    ## operator override
    given(T Any) MyList(T) {
        ## self[i]
        self.get(index Int) T = self.arr[index];
    }

    given(T Any) mut MyList(T) {
        ## self[i] = e
        self.set(index Int, element T) Void = self.arr[index] = element;
    }
}

type Foo(value Int);

type TreeNode = Empty() | Node(val Int, left TreeNode, right TreeNode);

type Color = Red() | Green() | Blue();

type Color(rgb String) =
    Red("ff0000") |
    Green("00ff00") |
    Blue("0000ff");

type Planet(mass Float, radius Float) =
    Mercury(3.303e+23, 2.4397e6) |
    Venus(4.869e+24, 6.0518e6) |
    Earth(5.976e+24, 6.37814e6) |
    Mars(6.421e+23, 3.3972e6) |
    Jupiter(1.9e+27, 7.1492e7) |
    Saturn(5.688e+26, 6.0268e7) | 
    Uranus(8.686e+25, 2.5559e7) |
    Neptune(1.024e+26, 2.4746e7);

type Option(T Any) = Some(value T) | None();

type Expr(T Any) =
    IntExpr(value Int) Expr(Int) |
    BoolExpr(value Bool) Expr(Bool) |
    EqualExpr(left Expr(T), right Expr(T)) Expr(Bool) |
    AddExpr(left Expr(Int), right Expr(Int)) Expr(Int);

type UserName(name String);
type Password(hash Hash);
type Identify = UserName | Password;
type HashKey(T Any) = Equatable(T) & Hashable;

given(T ToString) Option(T) {
    self.toString() String = 
        if Some(v) <- self 
        then "Some(\{v})" 
        else "None()";
}

given Foo {
    self.toString() String = "foo";
}
given(T Any, R Any) type(T) R {
    self.toAny() Any = self;
}

type LinkedList(T Any) =
    Cons(head T, tail LinkedList(T)) |
    Empty();

given(T Any) LinkedList(T) {
    new() Self = Empty();
}

type List(T Any) {
    self.get(index Int) T;

    self.set(index Int, element T) Void;
}

type mut ArrayList(T Any)(_arr Array(T), size Int);

given(T Any) ArrayList(T) {
    new() Self = Self([], 0);

    self.get(index Int) T = self._arr.get(index);

    self.set(index Int, element T) Void = self._arr.set(index, element);

    self.map(R Any)(f type(T) R) ArrayList(R) = Map(T, R)(self, f);
}

given ArrayList(Int) {
    self.sum() Int = self.reduce(0, (l, r) -> l + r);
}

type ToString {
    self.toString() String;
}

given Int {
    self.toString() String = cprintf(self);
}

given(T ToString) ArrayList(T) {
    self.toString() String = join_String(self);
}

given Int {
    default() Self = 0;
}

given String {
    default() Self = "";
}

given(T Any) Array(T) {
    default() Self = arrayOf(T)();
}

type Any {}

type Sequence(T Any) {
    self.iterator() Iterator(T);
}

type Iterator(T Any) {
    self.next() Option(T);
}

given(T Any) Iterator(T) {
    self.reduce(R Any)(r R, f type(R, T) R) = {
        while Some(v) <- self.next() then r = f(r, v);
        r
    }
}

type InputStream {
    self.read(to Array(Byte)) Int;
}

type OutputStream {
    self.write(from Array(Byte)) Int;
    self.flush() Void;
}

type mut Array(T Any)(_source RawArray(T), _start Int, _len Int) {
    create(size Int, item T) = Array(T)(RawArray.new(size, item), 0, size);

    self.size() = self._len;

    self.get(index Int) = self._source[index + _start];
    
    self.set(index Int, value T) = self._source[index + _start] = value;
    
    self.slice(start Int, len Int) Array(T) = 
        Array(T)(self._source, start, len);
}

type mut ArrayIterator(T Any)(_source Array(T), index Int) {
    of(source Array(T)) = ArrayIterator(source, -1);
    
    self.next() Option(T) = 
        if self.index < self._source.size() then {
            self.index += 1;
            Some(self._source[self.index])
        } else {
            None()
        }
}

type String(_data Array(Rune)) {
    of(data Array(Rune)) String = String(data.clone());

    self.toString() String = String(self._data.clone());

    self.clone() String = String(self._data.clone());

    self.iterator() StringIterator = StringIterator.of(self);
}

type mut StringIterator(_source String, index Int);

given StringIterator {
    of(source String) = StringIterator(source, -1);

    self.next() Option(Rune) = 
        if self.index < self._source._data.size() then {
            self.index += 1;
            Some(self._source[self.index])
        } else {
            None()
        }
}

type mut Node(T Any)(value T, next Option(Node(T)));

type mut LinkedList(T Any)(head Option(Node(T)), size Int);

given(T Any) LinkedList(T) {
    self.prepend(v T) Void = {
        let node = Node(v, None());
        if None <- self.head then {
            self.head = node;
        } else {
            node.next = self.head;
            self.head = node;
        }
        self.size += 1;
    }
}

#*
不可变可以自动优化成值类型
可变类型使用ARC
有静态函数
有受限的继承，在当前编译单元内

*#
