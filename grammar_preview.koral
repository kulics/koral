## Grammar Overview

## Export Name Space
export demo;

## Import Name Space
import {
    System;
    System.Text;
    System.Threading.Tasks;
    . = IO.File; ## 可以隐藏元素使用内容
}

let main() = {
    ## Define, 一般情况下编译器会自动判断类型
    let string String = "10";
    let number Float = 1.2;
    let integer Int = 123;
    let boolean Bool = true;
    let smallFloat = (1.2).toFloat32(); ## basic obj convert

    ## Const
    let PI = 3.141592653;

    ## Mark String
    let format = "the value is \{integer}, \{number}, \{boolean}";

    ## Array
    let array [Int]Array = arrayOf(1, 2, 3);
    let array2 [Int]Array = [1, 2, 3];

    ## List
    let list [Int]List = [1, 2, 3, 4, 5];
    print( list[0] ); ## 使用下标获取

    ## Map, 前面为 key，后面为 value
    let map [String, Bool]Map = [("1", false), ("2", true)];
    print( map["1"] ); ## 使用key获取

    ## Function
    let f(a Int) Int = a;

    ## Function with no params no return
    let do_something_void() Void = {
        do_something_a();
        do_something_b();
    }

    ## Full Function with params and return
    let do_something_with_params(x Int, y String) type(a Int, b String) = (x, y);

    ## Function type
    let f type(x Int, y Int) Int = (x Int, y Int) Int -> x + y;
    let f type(x Int, y Int) Int = (x, y) -> x + y;
    let f(x Int, y Int) Int = x + y;
    let f(x Int, y Int) = x + y;
    let g() Void = {}
    let g type() Void = () -> {}

    ## Currying
    let add = (x Int) -> (y Int) -> x + y;
    let add type(x Int) type(y Int) Int = (x) -> (y) -> x + y;
    let add type(x Int)(y Int) Int = x -> y -> x + y;
    let add(x Int)(y Int) = x + y;
    let v = add(1)(2);

    ## Lambda Function
    listOf(1, 2, 3, 4).filter(x -> x % 2 == 0).map(x -> x * x).sum();

    ## Func params
    let f(i type(x Int) Int) = i(1);
    f((x Int) Int -> x);
    f(x -> x);

    do_something_void();
    ## use _ discard return value
    _ = do_something_with_params(3, "test");

    ## if, single branch structure
    if (a < b) {
        ...
    }

    ## with-init
    if (let a = 1; a < 0) {
        ...
    }

    ## with ent statement
    if (let r = File.open("./x.o"); Ok(f) <- r; f.close()) {
        f.readAll()
    }

    ## if-else, double branch structure
    let v = if (true) 0 else 0;
    if (true) {
        ...
    } else {
        ...
    }

    if (a) {
        ...
    } else if (b) {
        ...
    } else {
        ...
    }

    let op [Int]Option = Some(1);
    ## if with pattern matching
    if (Some(v) <- op) {
        printLine(v)
    }

    ## while, single branch structure
    while (a < b) {
        ...
    }

    ## with-init
    while (let mut i = 0; i < 10) {
        printLine(i)
    }

    ## with end statement
    while (let mut i = 0; i < 10; i += 1) {
        printLine(i)
    }

    ## while-else, double branch structure, break can with value
    let v = while (true) break 1 else 2;
    while (true) {
        ...
    } else {
        ...
    }

    let iter [Int]Iterator = listOf(1,2,3).iterator();
    ## while with pattern matching
    while (Some(v) <- iter.next()) {
        printLine(v)
    }

    ## switch
    switch (x) {
        1 -> "a",
        2 -> "b",
        3 -> "c",
        _ -> "d",
    }

    ## single
    switch (x <- expr) {
        ...
    }

    ## with-init
    switch (let e = expr; e) {
        ...
    }
    
    ## for
    for (array) {
        1 -> "a",
        2 -> "b",
        3 -> "c",
        _ -> "d",
    }

    ## single
    for (item <- array) {
        ...
    }

    ## with-init
    for (let list = [1,2,3,4]; item <- list) {
        ...
    }

    ## Loop, use identify to take out single item
    for (item <- array) printLine(item);
    
    ## take index and value, both worked at Dictionary
    for ((index, value) <- array.iterator().enumerate()) {
        printLine((index, value))
    }
    
    for (i <- 0..10) {
        printLine(i)
    }

    for (i <- 0..10) if (i % 2 == 0) print(i);

    ## range
    1..10
    1..<10
    1<..10
    ..
    1..
    1<..
    ..2
    ..<2

    let nb = 42;
    switch (nb) {
        >= 0 & <= 7 | 8 | 9 ->
            print("single digit"),
        10 ->
            print("double digits"),
        >= 11 & <= 99 -> 
            print("double digits"),
        >= 100 & <= 999 -> 
            print("triple digits"),
        _ ->
            print("four or more digits"),
    }

    if (A(x) <- foo() and B(y) <- bar(x)) {
        do_stuff_with(x, y)
    } else {
        some_long_expression
    }

    let param_env(tcx TyCtxt, def_id DefId) ParamEnv = {
        if (Some(Def.Existential(_)) <- tcx.describe_def(def_id)
            and Some(node_id) <- tcx.hir.as_local_node_id(def_id)
            and hir.map.NodeItem(item) <- tcx.hir.get(node_id)
            and hir.ItemExistential(exist_ty) <- item.node
            and Some(parent) <- exist_ty.impl_trait_fn)
        return param_env(tcx, parent);

        ...
    }

    ## data type define
    type Button(width Int, height Int, background String, title String) {
        self.click() Void = {
            printLine(title);
            doSomeThingA();
            doSomeThingB();
        }
    }

    ## private members
    type Image(
        private width Int,
        private height Int,
        private source String,
    );

    ## abstract type define
    type Animation {
        self.move(s Int) Void;
        self.stop() Void;
    }

    ## Combine Template
    type ImageButton(image Image, button Button);
    given ImageButton {
        self.move(s Int) Void = {
            let t = 5000/s;
            play( s + t );
        }
        self.stop() Void = {}
    }

    ## Create an Template object
    let btn = Button(1, 2, "Cancel");
    let img = Image(1, 2, "?.jpg");
    let mut ib ImageButton = Image(img, btn);
    ib = (img, btn);
    ## Calling property
    ib.title = "OK";
    ## Calling method
    ib.show();
    ## Calling protocol
    ib.move(6);

    ## Use Interface
    let play_animation(a Animation) = {
        a.move(1000);
        a.stop();
    }
    play_animation(ib);

    ## Annotation
    #Table("user") #Property(false, name = "d", hide = true)
    type User(
        #Column("id") #Required #Key
        id String,
        #Column("nick_name") #Required
        nick_name String,
        #Column("time_update") #Required
        time_update Int,
    );
    
    ## Generic Type
    type mut [T Any]Table(data T);

    given[T Any] [T]Table {
        self.setData(d T) Void = {
            self.data = d;
        }
    }

    [Int]Table(1);

    ## Generic function
    let [T Addable]add(x1 T, x2 T) T = x1 + x2;
    [Int]add(1, 2);

    type Void();

    type Color { Red(), Green(), Blue(); }

    type Point(x Int, y Int);

    type [T1 Any, T2 Any]Pair(first T1, second T2);

    type [T Any]Option { Some(value T), None(); }

    let opt() = {
        let mut a [Int]Option = Some(1);
        a = None();
        switch (a) {
            Some(v) -> printLine(v),
            None -> printLine("none"),
        }

        let mut b [[Int]Option]Option = [[Int]Option]Some([Int]Some(2));
        b = [[Int]Option]Option.Some([Int]Option.Some(2));

        switch (b) {
            Some(Some(v)) -> printLine(v),
            Some(None) -> printLine("some(none)"),
            None -> printLine("none"),
        }
    }
    
    type mut? [T Any]MyList(arr mut [T]Array);
    ## operator override
    given[T Any] [T]MyList {
        ## this[i]
        self.get(index Int) T = self.arr[index];
    }

    given[T Any] mut [T]MyList {
        ## this[i] = e
        self.set(index Int, element T) Void = self.arr[index] = element;
    }
    
    ## Iterator pattern
    type [T Any]Iterator {
        self.next() [T]Option;
    }
    
    type [T Any]Iterable {
        self.iter() [T]Iterator;
    }
    
    type [T Any]ListNode {
        Empty(), Node(head T, tail [T]ListNode);
    }

    given[T Any] [T]ListNode {
        Iterator = ListIterator;

        self.iter() [T]Iterator = ListNodeIterator(this);
    }

    type mut ListIterator(li [T]ListNode);

    given[T Any] [T]ListIterator {
        self.next() [T]Option =
            if (Node(h, t) <- self.li) {
                self.li = t;
                Some(h)
            } else None()
    }

    type TreeNode { Empty(), Node(val Int, left TreeNode, right TreeNode); }

    type Nat { Zero(), Suc(n Nat); }
}

type Foo(value Int);

type Color { Red(), Green(), Blue() }

type Color(rgb String) {
    Red("ff0000"),
    Green("00ff00"),
    Blue("0000ff"),
}

type Planet(mass Float, radius Float) {
    Mercury(3.303e+23, 2.4397e6),
    Venus(4.869e+24, 6.0518e6),
    Earth(5.976e+24, 6.37814e6),
    Mars(6.421e+23, 3.3972e6),
    Jupiter(1.9e+27, 7.1492e7),
    Saturn(5.688e+26, 6.0268e7),
    Uranus(8.686e+25, 2.5559e7),
    Neptune(1.024e+26, 2.4746e7),
}

type [T Any]Option { Some(value T), None() }

type [T Any]Expr {
    IntExpr(value Int) [Int]Expr,
    BoolExpr(value Bool) [Bool]Expr,
    EqualExpr(left [T]Expr, right [T]Expr) [Bool]Expr,
    AddExpr(left [Int]Expr, right [Int]Expr) [Int]Expr,
}

type UserName(name String);
type Password(hash Hash);
type Identify = UserName | Password;
type [T Any]HashKey = [T]Equatable & Hashable;

given[T ToString] [T]Option {
    self.toString() String = 
        if (Some(v) <- this) "Some(\{v})" 
        else "None()";
}

given Foo {
    self.toString() String = "foo";
}
given[T Any, R Any] type(x T) R {
    self.toAny() Any = this;
}

type [T Any]LinkedList {
    Cons(head T, tail [T]LinkedList);
    Empty();
}

given[T Any] [T]LinkedList {
    new() This = Empty();
}

type [T Any]List {
    self.get(index Int) T;

    self.set(index Int, element T) Void;
}

type mut [T Any]ArrayList(_arr [T]Array, size Int);

given[T Any] [T]ArrayList {
    new() This = This([], 0);

    self.get(index Int) T = self._arr.get(index);

    self.set(index Int, element T) Void = self._arr.set(index, element);

    self.[R Any]map(f type(x T) R) [R]Iterator = [T, R]MapIter(this, f);
}

given [Int]ArrayList {
    self.sum() Int = reduce(self.iterator(), 0, (l, r) -> l + r);
}

type ToString {
    self.toString() String;
}

given Int {
    self.toString() String = cprintf(this);
}

given[T ToString] [T]ArrayList {
    self.toString() String = join_String(self.iterator());
}

given Int {
    default() This = 0;
}

given String {
    default() This = "";
}

given [T Any] [T]Array {
    default() This = [T]arrayOf();
}

type Any {}

type [T]Iterator {
    self.next() [T]Option
}

given[T Any] [T]Iterator {
    self.[R Any]reduce(r R, f type(a R, b T) R) = {
        while (Some(v) <- self.next()) {
            r = f(r, v)
        }
        r
    }
}

type InputStream {
    self.read(to [Byte]Array) Int;
}

type OutputStream {
    self.write(from [Byte]Array) Int;
    self.flush() Void;
}

type mut [T Any]Array(_source [T]RawArray, _start Int, _len Int) {
    create(size Int, item T) = [T]Array(RawArray.new(size, item), 0, size);

    self.size() = self._len;

    self.get(index Int) = self._source[index + _start];
    
    self.set(index Int, value T) = self._source[index + _start] = value;
    
    self.slice(start Int, len Int) [T]Array = 
        [T]Array(self._source, start, len);
}

type mut [T Any]ArrayIterator(_source [T]Array, index Int) {
    of(source [T]Array) = ArrayIterator(source, -1);
    
    self.next() [T]Option = 
        if (self.index < self._source.size()) {
            self.index += 1;
            Some(self._source[self.index])
        } else {
            None()
        }
}

type String(_data [Char]Array) {
    of(data [Char]Array) String = String(data.clone());

    self.toString() String = String(self._data.clone());

    self.clone() String = String(self._data.clone());

    self.iter() StringIterator = StringIterator.of(this);
}

type mut StringIterator(_source String, index Int) 

let StringIterator.of(source String) = StringIterator(source, -1);

given (this StringIterator) {
    self.next() [Char]Option = 
        if (self.index < self._source._data.size()) {
            self.index += 1;
            Some(self._source[self.index])
        } else {
            None()
        }
}

type mut [T Any]Node(value T, next [[T]Node]Option);

type mut [T Any]LinkedList(head [[T]Node]Option, size Int);

given [T Any] [T]LinkedList {
    self.prepend(v T) Void = {
        let node = Node(v, None());
        if (None <- self.head) {
            self.head = node;
        } else {
            node.next = self.head;
            self.head = node;
        }
        self.size += 1;
    }
}

#*
不可变可以自动优化成值类型
可变类型使用ARC
有静态函数
有受限的继承，在当前编译单元内

*#
