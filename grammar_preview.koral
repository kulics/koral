// Grammar Overview

// Export Name Space
export demo;

// Import Name Space
import {
    System;
    System.Text;
    System.Threading.Tasks;
    IO.File.{..}; // import all
}

let main() = {
    // Define
    let string: String = "10";
    let number: Float64 = 1.2;
    let integer: Int = 123;
    let boolean: Bool = true;
    let double: Float64 = 1.23;
    let single: Float32 = double as Float32; // basic value convert

    // Const
    let PI = 3.141592653;

    // Mark String
    let format = "the value is \{integer}, \{number}, \{boolean}";

    // Array
    let array: (Int)Array = [1, 2, 3];

    // List
    let list: (Int)List = [1, 2, 3, 4, 5];
    print( list[0] ); // 使用下标获取

    // Map, 前面为 key，后面为 value
    let map: (String, Bool)Map = [("1", false), ("2", true)];
    print( map["1"] ); // 使用key获取

    // Function
    let f(a: Int): Int = a;

    // Function with no params no return
    let do_something_void(): Void = {
        do_something_a();
        do_something_b();
    }

    // Full Function with params and return
    let do_something_with_params(x: Int, y: String): (Int, String)Tuple = (x, y);

    // Function type
    let f: (Int, Int, Int)Func = (x: Int, y: Int): Int -> x + y;
    let f: (Int, Int, Int)Func = (x, y) -> x + y;
    let f(x: Int, y: Int): Int = x + y;
    let f(x: Int, y: Int) = x + y;
    let g(): Void = {}
    let g: (Void)Func = () -> {}

    // Currying
    let add = (x: Int) -> (y: Int) -> x + y;
    let add: (Int, (Int, Int)Func)Func = (x) -> (y) -> x + y;
    let add(x: Int)(y: Int) = x + y;
    let v = add(1)(2);

    // Lambda Function
    List.of(1, 2, 3, 4).filter((x) -> x % 2 == 0).map((x) -> x * x).sum();

    // Func params
    let f(i: (Int, Int)Func) = i(1);
    f((x: Int): Int -> x);
    f((x) -> x);

    do_something_void();
    // use _ discard return value
    _ = do_something_with_params(3, "test");

    // logic operator
    x and y;
    x or y;
    not x;
    // compare operator
    x == y;
    x <> y;
    x > y;
    x < y;
    x >= y;
    x <= y;
    // bit operator
    x & y;
    x | y;
    x ^ y;
    ~x;
    x << y;
    x >> y;

    // if-then, single branch structure
    if a < b then {
        ...
    }

    // with-init
    if let a = 1; a < 0 then {
        ...
    }

    // if-then-else, double branch structure
    let v = if true then 0 else 0;
    if true then {
        ...
    } else {
        ...
    }

    if a then {
        ...
    } else if b then {
        ...
    } else {
        ...
    }

    let op: (Int)Option = Some(1);
    // if with pattern matching
    if op is Some(v) then {
        printLine(v)
    }

    // while-then, single branch structure
    while a < b then {
        ...
    }

    // with-init
    while let mut i = 0; i < 10 then {
        printLine(i)
    }

    // while-then-else, double branch structure, break can with value
    let v = while true then break 1 else 2;
    while true then {
        ...
    } else {
        ...
    }

    let iter: (Int)Iterator = List.of(1,2,3).iterator();
    // while with pattern matching
    while iter.next() is Some(v) then {
        printLine(v)
    }

    // when
    when x is {
        1 -> "a";
        2 -> "b";
        3 -> "c";
        _ -> "d";
    }

    // single
    when x as item then item;

    // for
    for array is {
        1 -> "a";
        2 -> "b";
        3 -> "c";
        _ -> "d";
    }

    // single
    for array as item then {
        ...
    }

    // with-init
    for let list = [1,2,3,4]; list as item then {
        ...
    }

    // Loop, use identify to take out single item
    for array as item then printLine(item);
    
    // take index and value, both worked at Dictionary
    for array.enumerate() as (index, value) then {
        printLine((index, value))
    }
    
    for 0..<=10 as i then {
        printLine(i)
    }

    for 0..<=10 as i then if i % 2 == 0 then print(i);

    // sequence
    1..<=10
    1..<10
    10..>1
    10..>=1
    // slice
    list[:]
    list[1:10]
    list[1:]
    list[:10]

    let nb = 42;
    when nb is {
        >= 0 and <= 7 or 8 or 9 ->
            print("single digit");
        10 ->
            print("double digits");
        >= 11 and <= 99 -> 
            print("double digits");
        >= 100 and <= 999 -> 
            print("triple digits");
        _ ->
            print("four or more digits");
    }

    // pattern matching
    when val is {
        1 -> ...; // int literal
        1.0 -> ...; // float literal
        'a' -> ...; // string literal
        "abc" -> ...; // string literal
        true -> ...; // bool literal
        _ -> ...; // wildcard
        {y} -> ...; // expression, y must be a constant
        x -> ...; // binding
        mut x -> ...; // mutable binding
        x: Int -> ...; // type casting
        Int -> ...; // type casting
        Int as x -> ...; // type casting
        Foo(x, y) -> ...; // type deconstruct
        (x, y) -> ...; // tuple
        .Some(x) -> ...; // enum
    }

    if foo() is A(x) and bar(x) is B(y) then {
        do_stuff_with(x, y)
    } else {
        some_long_expression
    }

    let param_env(tcx: TyCtxt, def_id: DefId): ParamEnv = {
        if tcx.describe_def(def_id) is Some(Def.Existential(_))
            and tcx.hir.as_local_node_id(def_id) is Some(node_id)
            and tcx.hir.get(node_id) is hir.map.NodeItem(item)
            and item.node is hir.ItemExistential(exist_ty)
            and exist_ty.impl_trait_fn is Some(parent)
        then return param_env(tcx, parent);

        ...
    }

    // data type define
    type Button(width: Int, height: Int, background: String, title: String) {
        self.click(): Void = {
            printLine(title);
            doSomeThingA();
            doSomeThingB();
        }
    }

    // private members
    type Image(
        private width: Int,
        private height: Int,
        private source: String,
    );

    // abstract type define
    type Animation {
        self.move(s: Int): Void;
        self.stop(): Void;
    }

    // Combine Template
    type ImageButton(image: Image, button: Button);
    given ImageButton {
        self.move(s: Int): Void = {
            let t = 5000/s;
            play( s + t );
        }
        self.stop(): Void = {}
    }

    // Create an Template object
    let btn = Button(1, 2, "Cancel");
    let img = Image(1, 2, "?.jpg");
    let ib: ImageButton = Image(img, btn);
    ib = (img, btn);
    // Calling property
    ib.title = "OK";
    // Calling method
    ib.show();
    // Calling protocol
    ib.move(6);

    // Use Interface
    let play_animation(a: Animation) = {
        a.move(1000);
        a.stop();
    }
    play_animation(ib);

    // Annotation
    [Table("user"), Property(false, name = "d", hide = true)]
    type User(
        [Column("id"), Required, Key]
        id: String,
        [Column("nick_name"), Required]
        nick_name: String,
        [Column("time_update"), Required]
        time_update: Int,
    );
    
    // Generic Type
    type (T: Any)Table(mut data: T);
    given(T: Any) (T)Table {
        self.setData(d: T): Void = {
            self.data = d;
        }
    }
    (Int)Table(1);
    Table(1);

    // Generic function
    let (T: Addable)add(x1: T, x2: T): T = x1 + x2;
    (Int)add(1, 2);
    add(1, 2);

    let opt() = {
        let mut a: (Int)Option = Some(1);
        a = None();
        when a is {
            Some(v) -> printLine(v);
            None -> printLine("none");
        }

        let mut b: ((Int)Option)Option = Some(Some(2));
        b = ((Int)Option)Option.Some((Int)Option.Some(2));
        when b is {
            Some(Some(v)) -> printLine(v);
            Some(None) -> printLine("some(none)");
            None -> printLine("none");
        }
    }
    
    type (T: Any)MyList(mut arr: (T)Array);
    // operator override
    given(T: Any) (T)MyList {
        // self[i]
        self.get(index: Int): T = self.arr[index];

        // self[i] = e
        self.set(index: Int, element: T): Void = self.arr[index] = element;
    }
}

// simple types
type Foo(value: Int);

// adt
type TreeNode {
    Empty();
    Node(val: Int, left: TreeNode, right: TreeNode);
}

type Color {
    Red();
    Green();
    Blue();
}

type Color(rgb: String) {
    Red("ff0000");
    Green("00ff00");
    Blue("0000ff");
}

type Planet(mass: Float, radius: Float) {
    Mercury(3.303e+23, 2.4397e6);
    Venus(4.869e+24, 6.0518e6);
    Earth(5.976e+24, 6.37814e6);
    Mars(6.421e+23, 3.3972e6);
    Jupiter(1.9e+27, 7.1492e7);
    Saturn(5.688e+26, 6.0268e7); 
    Uranus(8.686e+25, 2.5559e7);
    Neptune(1.024e+26, 2.4746e7);
}

type (T: Any)Option {
    Some(value: T);
    None();
}

type (T: Any)Expr {
    IntExpr(value: Int): (Int)Expr;
    BoolExpr(value: Bool): (Bool)Expr;
    EqualExpr(left: (T)Expr, right: (T)Expr): (Bool)Expr;
    AddExpr(left: (Int)Expr, right: (Int)Expr): (Int)Expr;
}

type Any {}

given(T: Any, R: Any) (T, R)Func {
    self.toAny(): Any = self;
}

given Int {
    default(): Self = 0;
}

given String {
    default(): Self = "";
}

given(T: Any) (T)Array {
    default(): Self = (T)arrayOf();
}

// escape annotation
// "a" only can be use, can not escape
let borrow(a: in Foo): Foo = ...;
// return value only can use in the call side scope
let view(a: in Foo): inout WrapperFoo = ...;
// return value can not escape
let new(): out Foo = ...;
// "a" only can be moved to return value, can not escape
let transfer(a: inout Foo): out WrapperFoo = ...;

type ToString {
    in self.toString(): String;
}

given Foo { // 隐式实现
    in self.toString(): String = ...;
}

given Bar: ToString { // 可选显式实现
    in self.toString(): String = ...;
}

given(T: ToString) (T)ArrayList {
    in self.toString(): String = join_String(self);
}

given(T: ToString) (T)Option {
    in self.toString(): String = 
        if self is Some(v) 
        then "Some(\{v})" 
        else "None()";
}

given Foo {
    in self.toString(): String = "foo";
}

type (T: Any)LinkedList {
    Cons(head: T, tail: (T)LinkedList);
    Empty();
}

type (T: Any)List {
    in self.get(index: Int): T;
    in self.set(index: Int, element: T): Void;
}

type (T: Any)ArrayList(mut _arr: (T)Array, mut size: Int);

given(T: Any) (T)ArrayList {
    new(): out Self = Self([], 0);

    in self.get(index: Int): T = self._arr.get(index);
    in self.set(index: Int, element: T): Void = self._arr.set(index, element);
    in self.add(element: T): Void = ...;

    in self.(R: Any)map(f: (T, R)Func): out (R)ArrayList = {
        let newList = Self.new();
        for self as item then newList.add(map(item));
        newList
    }
}

given (Int)ArrayList {
    in self.sum(): Int = self.reduce(0, (l, r) -> l + r);
}

type InputStream {
    in self.read(to: in (Byte)ArrayView): Int;
}

type OutputStream {
    in self.write(from: in (Byte)ArrayView): Int;
    in self.flush(): Void;
}

type (T: Any)Sequence {
    in self.iterator(): inout (T)Iterator;
}

type (T: Any)Iterator {
    in self.next(): (T)Option;
}

type (T: Any)Array(_source: (T)Ptr, _len: Int) {
    create(size: Int, item: T): out Self = Array((T)malloc(size, default: item), _len);

    in self.size(): Int = self._len;

    in self.get(index: Int): T = self._source[index];
    
    in self.set(index: Int, value: T): Void = self._source[index] = value;
    
    in self.slice(start: Int, len: Int): inout (T)ArrayView = 
        (T)ArrayView(self._source + start, len);

    in self.iterator(): inout (T)ArrayIterator =
        (T)ArrayIterator(_source, 0, self._len);
}

type inout (T: Any)ArrayView(_source: in (T)Ptr, _len: Int) {
    in self.size(): Int = self._len;

    in self.get(index: Int): T = self._source[index];
    
    in self.set(index: Int, value: T): Void = self._source[index] = value;
    
    in self.slice(start: Int, len: Int): inout (T)ArrayView = 
        (T)ArrayView(self._source + start, len);

    in self.iterator(): inout (T)ArrayIterator =
        (T)ArrayIterator(_source, 0, self._len);
}

type inout (T: Any)ArrayIterator(_source: in (T)Ptr, _index: Int, _len: Int) {   
    in self.next(): (T)Option = 
        if self._index < self._len then {
            self._index += 1;
            Some(self._source[self._index])
        } else {
            None()
        }
}

given(T: Any) (T)Sequence {
    in self.(R: Any)reduce(r: R, f: (R, T, R)Func) = {
        for self as v then r = f(r, v);
        r
    }
    inout self.filter(f: (T, Bool)Func): out (T)FilterSequence = FilterSequence.new(self, f);
    inout self.(R: Any)map(f: (T, R)Func): out (T, R)MapSequence = MapSequence(self, f);
}

type (T: Any)FilterSequence(seq: (T)Sequence, filter: (T, Bool)Func) {
    new(seq: inout (T)Sequence, filter: (T, Bool)Func): out (T)FilterSequence = FilterSequence(seq, filter);
    in self.iterator(): inout (T)FilterIterator = FilterIterator(self.seq.iterator(), self.filter);
}

type inout (T: Any)FilterIterator(iter: in (T)Iterator, filter: (T, Bool)Func) {
    in self.next(): (T)Option = 
        while self.iter.next() is Some(v) then {
            if self.filter(v) then return Some(v);
        } else None();
}

type (T: Any, R: Any)MapSequence(seq: (T)Sequence, mapper: (T, R)Func) {
    in self.iterator(): inout (T)MapIterator = MapIterator(self.seq.iterator(), self.mapper);
}

type inout (T: Any, R: Any)MapIterator(iter: in (T)Iterator, mapper: (T, R)Func) {
    in self.next(): (R)Option = 
        if self.iter.next() is Some(v) then Some(mapper(v)) else None();
}

type String(_data: (Rune)Array) {
    of(data: in (Rune)Array): out Self = String(data.clone());

    in self.toString(): String = String(self._data.clone());

    in self.clone(): String = String(self._data.clone());

    in self.iterator(): inout StringIterator = StringIterator(self, -1);
}

type inout StringIterator(_source: in String, index: Int);

given StringIterator {
    in self.next(): (Rune)Option = 
        if self.index < self._source._data.size() then {
            self.index += 1;
            Some(self._source[self.index])
        } else {
            None()
        }
}

type (T: Any)Node(mut value: T, mut next: ((T)Node)Option);

type (T: Any)LinkedList(mut head: ((T)Node)Option, mut size: Int);

given(T: Any) (T)LinkedList {
    in self.prepend(v: T): Void = {
        let node = Node(v, None());
        if self.head is None then {
            self.head = node;
        } else {
            node.next = self.head;
            self.head = node;
        }
        self.size += 1;
    }
}

/*
用 val 修饰的类型是值类型
其它类型是是用ARC的引用类型
用显式逃逸分析标记参数和返回类型优化引用计数
有静态函数
有受限的继承，在当前编译单元内

ARC规则：
作用域包含函数体，if的then、else分支，while的then分支。
1. 函数参数在函数结束后减计
2. 本地变量在作用域结束后减计
3. 由函数调用和类型构造产生的临时对象，在作用域结束后减计
4. 赋值时对原变量减计，再对新值增计
5. 传参时对参数值增计
6. 返回值增计
7. 初始化对值增计
8. and 和 or 短路后只处理右侧表达式的临时对象减计
*/
