// Grammar Overview

// Export Name Space
export demo;

// Import Name Space
import {
    System;
    System.Text;
    System.Threading.Tasks;
    . = IO.File; // 可以隐藏元素使用内容
}

let main() = {
    // Define, 一般情况下编译器会自动判断类型
    let string String = "10";
    let number Float64 = 1.2;
    let integer Int = 123;
    let boolean Bool = true;
    let smallFloat = (1.2).toFloat32(); // basic obj convert

    // Const
    let PI = 3.141592653;

    // Mark String
    let format = "the value is \{integer}, \{number}, \{boolean}";

    // Array
    let array (Int)Array = [1, 2, 3];

    // List
    let list (Int)List = List.of(1, 2, 3, 4, 5);
    print( list[0] ); // 使用下标获取

    // Map, 前面为 key，后面为 value
    let map (String, Bool)Map = Map.of(("1", false), ("2", true));
    print( map["1"] ); // 使用key获取

    // Function
    let f(a Int) Int = a;

    // Function with no params no return
    let do_something_void() Void = {
        do_something_a();
        do_something_b();
    }

    // Full Function with params and return
    let do_something_with_params(x Int, y String) (Int, String)Tuple = (x, y);

    // Function type
    let f (Int, Int, Int)Func = (x Int, y Int) Int -> x + y;
    let f (Int, Int, Int)Func = (x, y) -> x + y;
    let f(x Int, y Int) Int = x + y;
    let f(x Int, y Int) = x + y;
    let g() Void = {}
    let g (Void)Func = () -> {}

    // Currying
    let add = (x Int) -> (y Int) -> x + y;
    let add (Int, (Int, Int)Func)Func = (x) -> (y) -> x + y;
    let add (Int, (Int, Int)Func)Func = x -> y -> x + y;
    let add(x Int)(y Int) = x + y;
    let v = add(1)(2);

    // Lambda Function
    List.of(1, 2, 3, 4).filter(x -> x % 2 == 0).map(x -> x * x).sum();

    // Func params
    let f(i (Int, Int)Func) = i(1);
    f((x Int) Int -> x);
    f(x -> x);

    do_something_void();
    // use _ discard return value
    _ = do_something_with_params(3, "test");

    // if-then, single branch structure
    if a < b then {
        ...
    }

    // with-init
    if let a = 1; a < 0 then {
        ...
    }

    // if-then-else, double branch structure
    let v = if true then 0 else 0;
    if true then {
        ...
    } else {
        ...
    }

    if a then {
        ...
    } else if b then {
        ...
    } else {
        ...
    }

    let op (Int)Option = Some(1);
    // if with pattern matching
    if op is Some(v) then {
        printLine(v)
    }

    // while-then, single branch structure
    while a < b then {
        ...
    }

    // with-init
    while let mut i = 0; i < 10 then {
        printLine(i)
    }

    // while-then-else, double branch structure, break can with value
    let v = while true then break 1 else 2;
    while true then {
        ...
    } else {
        ...
    }

    let iter (Int)Iterator = List.of(1,2,3).iterator();
    // while with pattern matching
    while iter.next() is Some(v) then {
        printLine(v)
    }

    // when
    when x is {
        1 -> "a";
        2 -> "b";
        3 -> "c";
        _ -> "d";
    }

    // single
    when x as item then item;

    // for
    for array is {
        1 -> "a";
        2 -> "b";
        3 -> "c";
        _ -> "d";
    }

    // single
    for array as item then {
        ...
    }

    // with-init
    for let list = [1,2,3,4]; list as item then {
        ...
    }

    // Loop, use identify to take out single item
    for array as item then printLine(item);
    
    // take index and value, both worked at Dictionary
    for array.enumerate() as (index, value) then {
        printLine((index, value))
    }
    
    for 0..<=10 as i then {
        printLine(i)
    }

    for 0..<=10 as i then if i % 2 == 0 then print(i);

    // sequence
    1..<=10
    1..<10
    10..>1
    10..>=1
    // slice
    list[:]
    list[1:10]
    list[1:]
    list[:10]

    let nb = 42;
    when nb is {
        >= 0 & <= 7 | 8 | 9 ->
            print("single digit");
        10 ->
            print("double digits");
        >= 11 & <= 99 -> 
            print("double digits");
        >= 100 & <= 999 -> 
            print("triple digits");
        _ ->
            print("four or more digits");
    }

    // pattern matching
    when val is {
        1 -> ...; // int literal
        1.0 -> ...; // float literal
        'a' -> ...; // string literal
        "abc" -> ...; // string literal
        true -> ...; // bool literal
        _ -> ...; // wildcard
        {y} -> ...; // expression, y must be a constant
        x -> ...; // binding
        mut x -> ...; // mutable binding
        x Int -> ...; // type casting
        Int -> ...; // type casting
        Int as x -> ...; // type casting
        Foo(x, y) -> ...; // type deconstruct
        (x, y) -> ...; // tuple
        .Some(x) -> ...; // enum
    }

    if foo() is A(x) and bar(x) is B(y) then {
        do_stuff_with(x, y)
    } else {
        some_long_expression
    }

    let param_env(tcx TyCtxt, def_id DefId) ParamEnv = {
        if tcx.describe_def(def_id) is Some(Def.Existential(_))
            and tcx.hir.as_local_node_id(def_id) is Some(node_id)
            and tcx.hir.get(node_id) is hir.map.NodeItem(item)
            and item.node is hir.ItemExistential(exist_ty)
            and exist_ty.impl_trait_fn is Some(parent)
        then return param_env(tcx, parent);

        ...
    }

    // data type define
    type Button(width Int, height Int, background String, title String) {
        self.click() Void = {
            printLine(title);
            doSomeThingA();
            doSomeThingB();
        }
    }

    // private members
    type Image(
        private width Int,
        private height Int,
        private source String,
    );

    // abstract type define
    type Animation {
        self.move(s Int) Void;
        self.stop() Void;
    }

    // Combine Template
    type ImageButton(image Image, button Button);
    given ImageButton {
        self.move(s Int) Void = {
            let t = 5000/s;
            play( s + t );
        }
        self.stop() Void = {}
    }

    // Create an Template object
    let btn = Button(1, 2, "Cancel");
    let img = Image(1, 2, "?.jpg");
    let ib ImageButton = Image(img, btn);
    ib = (img, btn);
    // Calling property
    ib.title = "OK";
    // Calling method
    ib.show();
    // Calling protocol
    ib.move(6);

    // Use Interface
    let play_animation(a Animation) = {
        a.move(1000);
        a.stop();
    }
    play_animation(ib);

    // Annotation
    [Table("user"), Property(false, name = "d", hide = true)]
    type User(
        [Column("id"), Required, Key]
        id String,
        [Column("nick_name"), Required]
        nick_name String,
        [Column("time_update"), Required]
        time_update Int,
    );
    
    // Generic Type
    type mut (T Any)Table(data T);
    given(T Any) (T)Table {
        self.setData(d T) Void = {
            self.data = d;
        }
    }
    (Int)Table(1);
    Table(1);

    // Generic function
    let (T Addable)add(x1 T, x2 T) T = x1 + x2;
    (Int)add(1, 2);
    add(1, 2);

    let opt() = {
        let mut a (Int)Option = Some(1);
        a = None();
        when a is {
            Some(v) -> printLine(v);
            None -> printLine("none");
        }

        let mut b ((Int)Option)Option = Some(Some(2));
        b = ((Int)Option)Option.Some((Int)Option.Some(2));
        when b is {
            Some(Some(v)) -> printLine(v);
            Some(None) -> printLine("some(none)");
            None -> printLine("none");
        }
    }
    
    type mut (T Any)MyList(arr (T)Array);
    // operator override
    given(T Any) (T)MyList {
        // self[i]
        self.get(index Int) T = self.arr[index];

        // self[i] = e
        self.set(index Int, element T) Void = self.arr[index] = element;
    }
}

type Foo(value Int);

type TreeNode = Empty() | Node(val Int, left TreeNode, right TreeNode);

type Color = Red() | Green() | Blue();

type Color(rgb String) =
    Red("ff0000") |
    Green("00ff00") |
    Blue("0000ff");

type Planet(mass Float, radius Float) =
    Mercury(3.303e+23, 2.4397e6) |
    Venus(4.869e+24, 6.0518e6) |
    Earth(5.976e+24, 6.37814e6) |
    Mars(6.421e+23, 3.3972e6) |
    Jupiter(1.9e+27, 7.1492e7) |
    Saturn(5.688e+26, 6.0268e7) | 
    Uranus(8.686e+25, 2.5559e7) |
    Neptune(1.024e+26, 2.4746e7);

type (T Any)Option = Some(value T) | None();

type (T Any)Expr =
    IntExpr(value Int) (Int)Expr |
    BoolExpr(value Bool) (Bool)Expr |
    EqualExpr(left (T)Expr, right (T)Expr) (Bool)Expr |
    AddExpr(left (Int)Expr, right (Int)Expr) (Int)Expr;

type UserName(name String);
type Password(hash Hash);
type Identify = UserName | Password;
type (T Any)HashKey = (T)Equatable & Hashable;

given(T ToString) (T)Option {
    self.toString() String = 
        if self is Some(v) 
        then "Some(\{v})" 
        else "None()";
}

given Foo {
    self.toString() String = "foo";
}
given(T Any, R Any) (T, R)Func {
    self.toAny() Any = self;
}

type (T Any)LinkedList =
    Cons(head T, tail (T)LinkedList) |
    Empty();

given(T Any) (T)LinkedList {
    new() Self = Empty();
}

type (T Any)List {
    self.get(index Int) T;

    self.set(index Int, element T) Void;
}

type mut (T Any)ArrayList(_arr (T)Array, size Int);

given(T Any) (T)ArrayList {
    new() Self = Self([], 0);

    self.get(index Int) T = self._arr.get(index);

    self.set(index Int, element T) Void = self._arr.set(index, element);

    self.(R Any)map(f (T, R)Func) (R)ArrayList = (T, R)Map(self, f);
}

given (Int)ArrayList {
    self.sum() Int = self.reduce(0, (l, r) -> l + r);
}

type ToString {
    self.toString() String;
}

given Int {
    self.toString() String = cprintf(self);
}

given(T ToString) (T)ArrayList {
    self.toString() String = join_String(self);
}

given Int {
    default() Self = 0;
}

given String {
    default() Self = "";
}

given(T Any) (T)Array {
    default() Self = (T)arrayOf();
}

type Any {}

type (T Any)Sequence {
    self.iterator() (T)Iterator;
}

type (T Any)Iterator {
    self.next() (T)Option;
}

given(T Any) (T)Iterator {
    self.(R Any)reduce(r R, f (R, T, R)Func) = {
        while self.next() is Some(v) then r = f(r, v);
        r
    }
}

type InputStream {
    self.read(to (Byte)Array) Int;
}

type OutputStream {
    self.write(from (Byte)Array) Int;
    self.flush() Void;
}

type (T Any)ArrayView(_source (T)Array, _start Int, _len Int) {
    create(size Int, item T) = (T)ArrayView(Array.new(size, item), 0, size);

    self.size() = self._len;

    self.get(index Int) = self._source[index + _start];
    
    self.set(index Int, value T) = self._source[index + _start] = value;
    
    self.slice(start Int, len Int) (T)ArrayView = 
        (T)ArrayView(self._source, start, len);
}

type mut (T Any)ArrayIterator(_source (T)Array, index Int) {
    of(source (T)Array) = ArrayIterator(source, -1);
    
    self.next() (T)Option = 
        if self.index < self._source.size() then {
            self.index += 1;
            Some(self._source[self.index])
        } else {
            None()
        }
}

type String(_data (Rune)Array) {
    of(data (Rune)Array) String = String(data.clone());

    self.toString() String = String(self._data.clone());

    self.clone() String = String(self._data.clone());

    self.iterator() StringIterator = StringIterator.of(self);
}

type mut StringIterator(_source String, index Int);

given StringIterator {
    of(source String) = StringIterator(source, -1);

    self.next() (Rune)Option = 
        if self.index < self._source._data.size() then {
            self.index += 1;
            Some(self._source[self.index])
        } else {
            None()
        }
}

type mut (T Any)Node(value T, next ((T)Node)Option);

type mut (T Any)LinkedList(head ((T)Node)Option, size Int);

given(T Any) (T)LinkedList {
    self.prepend(v T) Void = {
        let node = Node(v, None());
        if self.head is None then {
            self.head = node;
        } else {
            node.next = self.head;
            self.head = node;
        }
        self.size += 1;
    }
}

/*
不可变可以自动优化成值类型
可变类型使用ARC
有静态函数
有受限的继承，在当前编译单元内

*/
